import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, filters, ContextTypes
)
from openai import OpenAI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
WAITING_DESCRIPTION = range(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data='generate')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        """–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –∏–ª–∏ —É—Å–ª—É–≥.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏:
- –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥–∏
- –ê–∫—Ü–∏–∏, –±–æ–Ω—É—Å—ã –∏–ª–∏ –≤—ã–≥–æ–¥—ã –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
- –°–∞–π—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)

–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:""",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏
async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.message.reply_text("""–ù–∞–ø–∏—à–∏, —á—Ç–æ —Ç—ã –ø—Ä–æ–¥–∞—ë—à—å –∏ –∫–∞–∫–∏–µ –∞–∫—Ü–∏–∏, –±–æ–Ω—É—Å—ã –∏–ª–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –µ—Å—Ç—å:

–ù–∞–ø—Ä–∏–º–µ—Ä: –ø—Ä–æ–¥–∞–∂–∞ –ª–æ–¥–æ–∫ –≤ –ú–æ—Å–∫–≤–µ, —Å–∫–∏–¥–∫–∞ 20%

–Ø —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é —Ç—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π. –ü–æ–≥–Ω–∞–ª–∏! üöÄ""")
    return WAITING_DESCRIPTION

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ GPT-4 Turbo
def generate_ads(prompt):
    try:
        logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {prompt}")
        response = client.chat.completions.create(
            model="gpt-4-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã —Å–æ–∑–¥–∞—ë—à—å –ø—Ä–æ–¥–∞—é—â–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –ö–∞–∂–¥–æ–µ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑:\n- –ó–∞–≥–æ–ª–æ–≤–æ–∫ 1: –¥–æ 56 —Å–∏–º–≤–æ–ª–æ–≤\n- –ó–∞–≥–æ–ª–æ–≤–æ–∫ 2: –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤\n- –¢–µ–∫—Å—Ç: –¥–æ 81 —Å–∏–º–≤–æ–ª–∞.\n–û—Ç–≤–µ—Ç –≤—Å–µ–≥–¥–∞ –≤ –≤–∏–¥–µ —Ç—Ä—ë—Ö —Ä–∞–∑–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."},
                {"role": "user", "content": f"–°–æ–∑–¥–∞–π –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è: {prompt}"}
            ]
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
        return "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."

# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def receive_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prompt = update.message.text
    await update.message.reply_text("üõ† –°–æ–∑–¥–∞—é —Ç—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π, –ø–æ–¥–æ–∂–¥–∏ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥...")
    ads = generate_ads(prompt)
    keyboard = [[InlineKeyboardButton("‚Ü∫ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data='regenerate')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(f"–í–æ—Ç 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞:\n\n{ads}", reply_markup=reply_markup)
    await update.message.reply_text("–•–æ—á–µ—à—å –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è? –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏ /start –¥–ª—è —Å–±—Ä–æ—Å–∞.")
    return WAITING_DESCRIPTION

# –°–±—Ä–æ—Å
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–∫–µ–π, –µ—Å–ª–∏ —á—Ç–æ ‚Äî –Ω–∞–ø–∏—à–∏ /start –∑–∞–Ω–æ–≤–æ üòä")
    await update.message.reply_text("–•–æ—á–µ—à—å –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è? –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏ /start –¥–ª—è —Å–±—Ä–æ—Å–∞.")
    return WAITING_DESCRIPTION

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞")

    token = os.getenv("BOT_TOKEN")
    if not token:
        raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

    app = ApplicationBuilder().token(token).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            WAITING_DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_description)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True
    )

    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(handle_button))
    app.add_handler(CallbackQueryHandler(handle_button, pattern='^regenerate$'))

    logger.info("ü§ñ –ë–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()
