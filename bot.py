import os
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, filters, ContextTypes
)
from openai import OpenAI

# –°–æ—Å—Ç–æ—è–Ω–∏—è
WAITING_DESCRIPTION = range(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data='generate')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        """–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –∏–ª–∏ —É—Å–ª—É–≥.

–ù–∞–ø–∏—à–∏:
‚Äî –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥–∏
‚Äî –ê–∫—Ü–∏–∏, –±–æ–Ω—É—Å—ã –∏–ª–∏ –≤—ã–≥–æ–¥—ã –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è

üëá –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:""",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.message.reply_text(
        "–ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ: —á—Ç–æ —Ç—ã –ø—Ä–æ–¥–∞—ë—à—å –∏ –∫–∞–∫–∏–µ –µ—Å—Ç—å –∞–∫—Ü–∏–∏ –∏–ª–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞.\n\n–ü—Ä–∏–º–µ—Ä: üö§ –ü—Ä–æ–¥–∞–∂–∞ –ª–æ–¥–æ–∫ –≤ –ú–æ—Å–∫–≤–µ ‚Äî —Å–∫–∏–¥–∫–∞ 20%"
    )
    return WAITING_DESCRIPTION

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ GPT-4
def generate_ads(prompt):
    try:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã —Å–æ–∑–¥–∞—ë—à—å –ø—Ä–æ–¥–∞—é—â–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –ö–∞–∂–¥–æ–µ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑:\n- –ó–∞–≥–æ–ª–æ–≤–æ–∫ 1: –¥–æ 56 —Å–∏–º–≤–æ–ª–æ–≤\n- –ó–∞–≥–æ–ª–æ–≤–æ–∫ 2: –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤\n- –¢–µ–∫—Å—Ç: –¥–æ 81 —Å–∏–º–≤–æ–ª–∞.\n–û—Ç–≤–µ—Ç –≤—Å–µ–≥–¥–∞ –≤ –≤–∏–¥–µ —Ç—Ä—ë—Ö —Ä–∞–∑–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."},
                {"role": "user", "content": f"–°–æ–∑–¥–∞–π –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è: {prompt}"}
            ]
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}"

# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
async def receive_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prompt = update.message.text
    await update.message.reply_text("üîß –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –ø–æ–¥–æ–∂–¥–∏ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥...")
    ads = generate_ads(prompt)
    keyboard = [[
        InlineKeyboardButton("üîÅ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data='regenerate'),
        InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data='edit')
    ]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(f"–í–æ—Ç 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ üëá\n\n{ads}", reply_markup=reply_markup)
    return WAITING_DESCRIPTION

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
async def handle_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.message.reply_text("‚úèÔ∏è –•–æ—Ä–æ—à–æ, –≤–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏ –∞–∫—Ü–∏–∏.")
    return WAITING_DESCRIPTION

# –°–±—Ä–æ—Å –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π —Å—Ç–∞—Ä—Ç
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ë–æ—Ç —Å–±—Ä–æ—à–µ–Ω. –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ üîÅ")
    return ConversationHandler.END

# –ó–∞–ø—É—Å–∫ —Å Webhook –¥–ª—è Render Web Service
async def main():
    token = os.getenv("BOT_TOKEN")
    webhook_url = os.getenv("WEBHOOK_URL")  # –ü–æ–ª—É—á–∞–µ–º WEBHOOK_URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    app = ApplicationBuilder().token(token).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            WAITING_DESCRIPTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, receive_description)
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True
    )

    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(handle_button, pattern='^generate$'))
    app.add_handler(CallbackQueryHandler(handle_button, pattern='^regenerate$'))
    app.add_handler(CallbackQueryHandler(handle_edit, pattern='^edit$'))

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Webhook URL –¥–ª—è Telegram API
    await app.bot.delete_webhook(drop_pending_updates=True)
    await app.bot.set_webhook(url=webhook_url)

    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å Webhook")
    await app.run_webhook(
        listen="0.0.0.0",
        port=int(os.getenv("PORT", 8000)),
        webhook_url=webhook_url
    )

if __name__ == "__main__":
    asyncio.run(main())
