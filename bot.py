import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, filters, ContextTypes
)
from openai import OpenAI
from lxml import etree

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
WAITING_FILE, CHOOSE_ACTION = range(2)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# –°—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–Ω—ã—Ö —Ñ–∏–¥–æ–≤.\n–ó–∞–≥—Ä—É–∑–∏ XML/CSV —Ñ–∞–π–ª, –∏ —è –ø–æ–º–æ–≥—É —Å –Ω–∏–º —Ä–∞–±–æ—Ç–∞—Ç—å.")
    return WAITING_FILE

# –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    file = update.message.document
    file_name = file.file_name
    file_path = f"temp/{file_name}"

    await file.get_file().download_to_drive(file_path)
    context.user_data["file_path"] = file_path

    keyboard = [
        [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—ã", callback_data='price')],
        [InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏", callback_data='picture')],
        [InlineKeyboardButton("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏—è", callback_data='description')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω. –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?", reply_markup=reply_markup)
    return CHOOSE_ACTION

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —á–µ—Ä–µ–∑ GPT
def generate_description_via_gpt(name):
    try:
        completion = client.chat.completions.create(
            model="gpt-4-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –ø–∏—à–µ—à—å –∫—Ä–∞—Ç–∫–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ (–¥–æ 80 —Å–∏–º–≤–æ–ª–æ–≤), –≤–∫–ª—é—á–∞—è –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é –∫—É–ø–∏—Ç—å –Ω–∞ —Å–∞–π—Ç–µ polza.ru."},
                {"role": "user", "content": f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞: {name}"}
            ]
        )
        return completion.choices[0].message.content[:81].strip()
    except Exception as e:
        return "–ü–æ–∫—É–ø–∞–π—Ç–µ –Ω–∞ —Å–∞–π—Ç–µ polza.ru ‚Äî –∫–∞—á–µ—Å—Ç–≤–æ –∏ –±–æ–Ω—É—Å—ã!"

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
async def process_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    action = query.data
    file_path = context.user_data.get("file_path")

    if action == "description":
        tree = etree.parse(file_path)
        root = tree.getroot()

        for offer in root.xpath(".//offer"):
            name = offer.findtext("name", default="–¢–æ–≤–∞—Ä")
            description = generate_description_via_gpt(name)
            desc_elem = offer.find("description")
            if desc_elem is not None:
                desc_elem.text = description
            else:
                etree.SubElement(offer, "description").text = description

        file_path = file_path.replace(".xml", "_desc.xml")
        tree.write(file_path, encoding="utf-8", xml_declaration=True, pretty_print=True)
        context.user_data["file_path"] = file_path
        await query.edit_message_text("–û–ø–∏—Å–∞–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —á–µ—Ä–µ–∑ GPT üß†")
    else:
        await query.edit_message_text("–î–µ–π—Å—Ç–≤–∏–µ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ (–≤ —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ)")

    await query.message.reply_document(InputFile(file_path), caption="–í–æ—Ç –≤–∞—à –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Ñ–∏–¥")
    return ConversationHandler.END

# –°–±—Ä–æ—Å
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–∫–µ–π, –µ—Å–ª–∏ —á—Ç–æ ‚Äî –Ω–∞–ø–∏—à–∏ /start –∑–∞–Ω–æ–≤–æ üòä")
    return ConversationHandler.END

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    app = ApplicationBuilder().token(os.getenv("BOT_TOKEN")).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            WAITING_FILE: [MessageHandler(filters.Document.ALL, handle_file)],
            CHOOSE_ACTION: [CallbackQueryHandler(process_action)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    app.add_handler(conv_handler)
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∏–¥–∞–º–∏")
    app.run_polling()
