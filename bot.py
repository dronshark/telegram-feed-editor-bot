import os
import openai
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, filters, ContextTypes
)
from telegram.ext import Updater
from telegram.error import Conflict

# –°–æ—Å—Ç–æ—è–Ω–∏—è
WAITING_DESCRIPTION = range(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
openai.api_key = os.getenv("OPENAI_API_KEY")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data='generate')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        """–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –∏–ª–∏ —É—Å–ª—É–≥.

–ù–∞–ø–∏—à–∏:
‚Äî –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥–∏
‚Äî –ê–∫—Ü–∏–∏, –±–æ–Ω—É—Å—ã –∏–ª–∏ –≤—ã–≥–æ–¥—ã –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è

üëá –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:""",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.message.reply_text(
        "–ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ: —á—Ç–æ —Ç—ã –ø—Ä–æ–¥–∞—ë—à—å –∏ –∫–∞–∫–∏–µ –µ—Å—Ç—å –∞–∫—Ü–∏–∏ –∏–ª–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞.\n\n–ü—Ä–∏–º–µ—Ä: üö§ –ü—Ä–æ–¥–∞–∂–∞ –ª–æ–¥–æ–∫ –≤ –ú–æ—Å–∫–≤–µ ‚Äî —Å–∫–∏–¥–∫–∞ 20%"
    )
    return WAITING_DESCRIPTION

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ GPT-4 Turbo
def generate_ads(prompt):
    try:
        # –ó–∞–ø—Ä–æ—Å –∫ OpenAI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        response = openai.ChatCompletion.create(
            model="gpt-4-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã —Å–æ–∑–¥–∞—ë—à—å –ø—Ä–æ–¥–∞—é—â–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –ö–∞–∂–¥–æ–µ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑:\n- –ó–∞–≥–æ–ª–æ–≤–æ–∫ 1: –¥–æ 56 —Å–∏–º–≤–æ–ª–æ–≤\n- –ó–∞–≥–æ–ª–æ–≤–æ–∫ 2: –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤\n- –¢–µ–∫—Å—Ç: –¥–æ 81 —Å–∏–º–≤–æ–ª–∞.\n–û—Ç–≤–µ—Ç –≤—Å–µ–≥–¥–∞ –≤ –≤–∏–¥–µ —Ç—Ä—ë—Ö —Ä–∞–∑–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."},
                {"role": "user", "content": f"–°–æ–∑–¥–∞–π –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è: {prompt}"}
            ]
        )
        ads = response['choices'][0]['message']['content'].strip()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        if not ads:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        return ads
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}"

# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
async def receive_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prompt = update.message.text
    await update.message.reply_text("üîß –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –ø–æ–¥–æ–∂–¥–∏ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥...")
    ads = generate_ads(prompt)
    
    # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    if "–û—à–∏–±–∫–∞" in ads:
        await update.message.reply_text(ads)
    else:
        keyboard = [[
            InlineKeyboardButton("üîÅ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data='regenerate'),
            InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data='edit')
        ]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(f"–í–æ—Ç 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ üëá\n\n{ads}", reply_markup=reply_markup)
    
    return WAITING_DESCRIPTION

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
async def handle_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.message.reply_text("‚úèÔ∏è –•–æ—Ä–æ—à–æ, –≤–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏ –∞–∫—Ü–∏–∏.")
    return WAITING_DESCRIPTION

# –°–±—Ä–æ—Å –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π —Å—Ç–∞—Ä—Ç
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ë–æ—Ç —Å–±—Ä–æ—à–µ–Ω. –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ üîÅ")
    return ConversationHandler.END

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook
async def set_webhook():
    url = os.getenv("WEBHOOK_URL")
    await app.bot.set_webhook(url)

# –ó–∞–ø—É—Å–∫ —Å webhook
def main():
    token = os.getenv("BOT_TOKEN")
    app = ApplicationBuilder().token(token).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            WAITING_DESCRIPTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, receive_description)
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True
    )

    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(handle_button, pattern='^generate$'))
    app.add_handler(CallbackQueryHandler(handle_button, pattern='^regenerate$'))
    app.add_handler(CallbackQueryHandler(handle_edit, pattern='^edit$'))

    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å webhook")
    
    # –ù–∞—Å—Ç—Ä–æ–∏–º webhook
    asyncio.run(set_webhook())
    
    # –ó–∞–ø—É—Å–∫ —Å webhook
    app.run_webhook(listen="0.0.0.0", port=5000, url_path=os.getenv("BOT_TOKEN"))
    
if __name__ == "__main__":
    main()
